/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package program;
import entity.*;
import java.awt.Desktop;
import java.net.URL;
import java.sql.Date;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.text.SimpleDateFormat;  

/**
 *
 * @author mathe
 */
public class main extends javax.swing.JFrame {
    private static DAO patientDAO, dentistDAO, appointmentDAO;

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        refreshAppointmentTable();
        refreshDentistTable();
        refreshPatientTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneDentalClinic = new javax.swing.JTabbedPane();
        jPanelPatient = new javax.swing.JPanel();
        jLabelPatientID = new javax.swing.JLabel();
        jLabelPatientFirstName = new javax.swing.JLabel();
        jLabelPatientLastName = new javax.swing.JLabel();
        jLabelPatientGender = new javax.swing.JLabel();
        jLabelPateintPhoneN = new javax.swing.JLabel();
        jTextFieldPatientID = new javax.swing.JTextField();
        jTextFieldPatientFirstName = new javax.swing.JTextField();
        jTextFieldPatientLastName = new javax.swing.JTextField();
        jTextFieldPatientGender = new javax.swing.JTextField();
        jTextFieldPatientPhoneN = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePatient = new javax.swing.JTable();
        jButtonPateintInsert = new javax.swing.JButton();
        jButtonPatientUpdate = new javax.swing.JButton();
        jButtonPatientDelete = new javax.swing.JButton();
        jLabelPatientTutorial = new javax.swing.JLabel();
        jLabelPNP = new javax.swing.JLabel();
        jPanelDentist = new javax.swing.JPanel();
        jTextFieldDentistID = new javax.swing.JTextField();
        jTextFieldDentistFirstName = new javax.swing.JTextField();
        jTextFieldDentistLastName = new javax.swing.JTextField();
        jTextFieldDentistPhoneN = new javax.swing.JTextField();
        jTextFieldDentistTitle = new javax.swing.JTextField();
        jLabelDentistID = new javax.swing.JLabel();
        jLabelDentistFirstName = new javax.swing.JLabel();
        jLabelDentistLastName = new javax.swing.JLabel();
        jLabelDentistPhoneN = new javax.swing.JLabel();
        jLabelDentistTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDentist = new javax.swing.JTable();
        jButtonDentistInsert = new javax.swing.JButton();
        jButtonDentistUpdate = new javax.swing.JButton();
        jButtonDentistDelete = new javax.swing.JButton();
        jLabelDentistTutorial = new javax.swing.JLabel();
        jLabelPND = new javax.swing.JLabel();
        jPanelAppointment = new javax.swing.JPanel();
        jLabelAppointmentID = new javax.swing.JLabel();
        jLabelAppDateTime = new javax.swing.JLabel();
        jLabelAppPatientID = new javax.swing.JLabel();
        jLabelAppDentistID = new javax.swing.JLabel();
        jLabelAppointmentNote = new javax.swing.JLabel();
        jTextFieldAppointmentID = new javax.swing.JTextField();
        jTextFieldAppPatientID = new javax.swing.JTextField();
        jTextFieldAppDentistID = new javax.swing.JTextField();
        jTextFieldAppointmentNote = new javax.swing.JTextField();
        dateTimePickerAppointment = new com.github.lgooddatepicker.components.DateTimePicker();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableAppointment = new javax.swing.JTable();
        jButtonAppointmentInsert = new javax.swing.JButton();
        jButtonAppointmentUpdate = new javax.swing.JButton();
        jButtonAppointmentDelete = new javax.swing.JButton();
        jLabelAppointmentTutorial = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelPatientID.setText("ID:");

        jLabelPatientFirstName.setText("First Name:");

        jLabelPatientLastName.setText("Last Name:");

        jLabelPatientGender.setText("Gender:");

        jLabelPateintPhoneN.setText("Phone Number:");

        jTextFieldPatientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPatientIDActionPerformed(evt);
            }
        });

        jTablePatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Gender", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePatientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePatient);

        jButtonPateintInsert.setText("Insert");
        jButtonPateintInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPateintInsertActionPerformed(evt);
            }
        });

        jButtonPatientUpdate.setText("Update");
        jButtonPatientUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPatientUpdateActionPerformed(evt);
            }
        });

        jButtonPatientDelete.setText("Delete");
        jButtonPatientDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPatientDeleteActionPerformed(evt);
            }
        });

        jLabelPatientTutorial.setText("Click here to watch tutorial!");
        jLabelPatientTutorial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelPatientTutorialMouseClicked(evt);
            }
        });

        jLabelPNP.setText("Note: Phone number can only be 10 digits");

        javax.swing.GroupLayout jPanelPatientLayout = new javax.swing.GroupLayout(jPanelPatient);
        jPanelPatient.setLayout(jPanelPatientLayout);
        jPanelPatientLayout.setHorizontalGroup(
            jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPatientLayout.createSequentialGroup()
                .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPatientLayout.createSequentialGroup()
                        .addComponent(jButtonPateintInsert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonPatientUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPatientDelete))
                    .addGroup(jPanelPatientLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPatientLayout.createSequentialGroup()
                                .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelPatientID, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelPatientFirstName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelPatientLastName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelPatientGender, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelPateintPhoneN, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldPatientFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldPatientLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldPatientGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldPatientPhoneN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabelPNP))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 216, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanelPatientLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabelPatientTutorial)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelPatientLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldPatientFirstName, jTextFieldPatientGender, jTextFieldPatientID, jTextFieldPatientLastName, jTextFieldPatientPhoneN});

        jPanelPatientLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonPateintInsert, jButtonPatientDelete, jButtonPatientUpdate});

        jPanelPatientLayout.setVerticalGroup(
            jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelPatientLayout.createSequentialGroup()
                        .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPatientID)
                            .addComponent(jTextFieldPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPatientFirstName)
                            .addComponent(jTextFieldPatientFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPatientLastName)
                            .addComponent(jTextFieldPatientLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPatientGender)
                            .addComponent(jTextFieldPatientGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPateintPhoneN)
                            .addComponent(jTextFieldPatientPhoneN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPNP)
                        .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPatientLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonPateintInsert))
                            .addGroup(jPanelPatientLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(jPanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonPatientUpdate)
                                    .addComponent(jButtonPatientDelete)))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelPatientTutorial)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        jTabbedPaneDentalClinic.addTab("Patient", jPanelPatient);

        jLabelDentistID.setText("ID:");

        jLabelDentistFirstName.setText("First Name:");

        jLabelDentistLastName.setText("Last Name:");

        jLabelDentistPhoneN.setText("Phone Number:");

        jLabelDentistTitle.setText("Title:");

        jTableDentist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Phone Number", "Title"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDentist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDentistMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableDentist);

        jButtonDentistInsert.setText("Insert");
        jButtonDentistInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDentistInsertActionPerformed(evt);
            }
        });

        jButtonDentistUpdate.setText("Update");
        jButtonDentistUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDentistUpdateActionPerformed(evt);
            }
        });

        jButtonDentistDelete.setText("Delete");
        jButtonDentistDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDentistDeleteActionPerformed(evt);
            }
        });

        jLabelDentistTutorial.setText("Click here to watch tutorial!");
        jLabelDentistTutorial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelDentistTutorialMouseClicked(evt);
            }
        });

        jLabelPND.setText("Note: Phone number can only be 10 digits");

        javax.swing.GroupLayout jPanelDentistLayout = new javax.swing.GroupLayout(jPanelDentist);
        jPanelDentist.setLayout(jPanelDentistLayout);
        jPanelDentistLayout.setHorizontalGroup(
            jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDentistLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDentistLayout.createSequentialGroup()
                            .addComponent(jLabelDentistLastName)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldDentistLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDentistLayout.createSequentialGroup()
                            .addComponent(jLabelDentistPhoneN)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldDentistPhoneN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDentistLayout.createSequentialGroup()
                            .addComponent(jLabelDentistTitle)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldDentistTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDentistLayout.createSequentialGroup()
                            .addComponent(jLabelDentistID)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldDentistID, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDentistLayout.createSequentialGroup()
                            .addComponent(jLabelDentistFirstName)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldDentistFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelDentistLayout.createSequentialGroup()
                        .addComponent(jButtonDentistInsert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDentistUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDentistDelete))
                    .addGroup(jPanelDentistLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabelDentistTutorial))
                    .addComponent(jLabelPND))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 246, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelDentistLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldDentistFirstName, jTextFieldDentistID, jTextFieldDentistLastName, jTextFieldDentistPhoneN, jTextFieldDentistTitle});

        jPanelDentistLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonDentistDelete, jButtonDentistInsert, jButtonDentistUpdate});

        jPanelDentistLayout.setVerticalGroup(
            jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDentistLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDentistID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDentistID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDentistFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDentistFirstName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDentistLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDentistLastName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDentistPhoneN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDentistPhoneN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDentistTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDentistTitle))
                .addGap(3, 3, 3)
                .addComponent(jLabelPND)
                .addGap(1, 1, 1)
                .addGroup(jPanelDentistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDentistInsert)
                    .addComponent(jButtonDentistUpdate)
                    .addComponent(jButtonDentistDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDentistTutorial, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
            .addGroup(jPanelDentistLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPaneDentalClinic.addTab("Dentist", jPanelDentist);

        jLabelAppointmentID.setText("ID:");

        jLabelAppDateTime.setText("Appointment Date Time:");

        jLabelAppPatientID.setText("Patient ID:");

        jLabelAppDentistID.setText("Dentist ID:");

        jLabelAppointmentNote.setText("Appointment Note:");

        jTableAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Appointment Date Time", "Patient ID", "Dentist ID", "Appointment Note"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAppointmentMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableAppointment);

        jButtonAppointmentInsert.setText("Insert");
        jButtonAppointmentInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAppointmentInsertActionPerformed(evt);
            }
        });

        jButtonAppointmentUpdate.setText("Update");
        jButtonAppointmentUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAppointmentUpdateActionPerformed(evt);
            }
        });

        jButtonAppointmentDelete.setText("Delete");
        jButtonAppointmentDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAppointmentDeleteActionPerformed(evt);
            }
        });

        jLabelAppointmentTutorial.setText("Click here to watch tutorial!");
        jLabelAppointmentTutorial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelAppointmentTutorialMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelAppointmentLayout = new javax.swing.GroupLayout(jPanelAppointment);
        jPanelAppointment.setLayout(jPanelAppointmentLayout);
        jPanelAppointmentLayout.setHorizontalGroup(
            jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAppointmentLayout.createSequentialGroup()
                .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAppointmentLayout.createSequentialGroup()
                        .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelAppointmentLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelAppointmentID, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelAppPatientID, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelAppDentistID, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelAppointmentNote, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(jPanelAppointmentLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabelAppDateTime)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateTimePickerAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldAppointmentID)
                            .addComponent(jTextFieldAppPatientID)
                            .addComponent(jTextFieldAppDentistID)
                            .addComponent(jTextFieldAppointmentNote))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAppointmentLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonAppointmentInsert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAppointmentUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAppointmentDelete)
                        .addGap(44, 44, 44)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                .addGap(22, 22, 22))
            .addGroup(jPanelAppointmentLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(jLabelAppointmentTutorial)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelAppointmentLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAppointmentDelete, jButtonAppointmentInsert, jButtonAppointmentUpdate, jLabelAppointmentTutorial});

        jPanelAppointmentLayout.setVerticalGroup(
            jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAppointmentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelAppointmentLayout.createSequentialGroup()
                        .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelAppointmentID)
                            .addComponent(jTextFieldAppointmentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateTimePickerAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelAppDateTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldAppPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelAppPatientID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldAppDentistID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelAppDentistID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelAppointmentNote)
                            .addComponent(jTextFieldAppointmentNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAppointmentDelete)
                            .addComponent(jButtonAppointmentUpdate)
                            .addComponent(jButtonAppointmentInsert))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelAppointmentTutorial)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        jTabbedPaneDentalClinic.addTab("Appointment", jPanelAppointment);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneDentalClinic)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneDentalClinic)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void refreshAppointmentTable() {
        List<Appointment> appointments = appointmentDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableAppointment.getModel();
        //Clear all items in jTableCheckInLocation
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Appointment appointment : appointments) {
                Object[] row = new Object[5];
                row[0] = appointment.getapID();
                row[1] = appointment.getapDateTime();
                row[2] = appointment.getpID();
                row[3] = appointment.getdID();
                row[4] = appointment.getapNote();
                model.addRow(row);
        }
    }
    private void refreshDentistTable() {
        List<Dentist> dentists = dentistDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableDentist.getModel();
        //Clear all items in jTableCheckInLocation
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Dentist dentist : dentists) {
                Object[] row = new Object[5];
                row[0] = dentist.getdID();
                row[1] = dentist.getdFname();
                row[2] = dentist.getdLname();
                row[3] = dentist.getdPhoneN();
                row[4] = dentist.getdTitle();
                model.addRow(row);
        }
    }
    private void refreshPatientTable() {
        List<Patient> patients = patientDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTablePatient.getModel();
        //Clear all items in jTableCheckInLocation
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Patient patient : patients) {
                Object[] row = new Object[6];
                row[0] = patient.getpID();
                row[1] = patient.getPatientFname();
                row[2] = patient.getPatientLname();
                row[3] = patient.getPatientGender();
                row[4] = patient.getPatientPhoneN();
                model.addRow(row);
        }
    }
    private void jTextFieldPatientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPatientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPatientIDActionPerformed

    private void jTablePatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePatientMouseClicked
        // TODO add your handling code here:
        int i = jTablePatient.getSelectedRow();
        TableModel model = jTablePatient.getModel();
        jTextFieldPatientID.setText(model.getValueAt(i, 0). toString());
        jTextFieldPatientFirstName.setText(model.getValueAt(i, 1). toString());
        jTextFieldPatientLastName.setText(model.getValueAt(i, 2). toString());
        jTextFieldPatientGender.setText(model.getValueAt(i, 3). toString());
        jTextFieldPatientPhoneN.setText(model.getValueAt(i, 4). toString());
    }//GEN-LAST:event_jTablePatientMouseClicked

    private void jTableDentistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDentistMouseClicked
        // TODO add your handling code here:
        int i = jTableDentist.getSelectedRow();
        TableModel model = jTableDentist.getModel();
        jTextFieldDentistID.setText(model.getValueAt(i, 0). toString());
        jTextFieldDentistFirstName.setText(model.getValueAt(i, 1). toString());
        jTextFieldDentistLastName.setText(model.getValueAt(i, 2). toString());
        jTextFieldDentistPhoneN.setText(model.getValueAt(i, 3). toString());
        jTextFieldDentistTitle.setText(model.getValueAt(i, 4). toString());
    }//GEN-LAST:event_jTableDentistMouseClicked

    private void jTableAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAppointmentMouseClicked
        // TODO add your handling code here:
        int i = jTableAppointment.getSelectedRow();
        TableModel model = jTableAppointment.getModel();
        jTextFieldAppointmentID.setText(model.getValueAt(i, 0). toString());
        String datetime = (model.getValueAt(i, 1). toString());
        LocalDate date1 = LocalDate.of(Integer.parseInt(datetime.substring(0, 4)) , 
                Integer.parseInt(datetime.substring(5, 7)), Integer.parseInt(datetime.substring(8, 10)));
        LocalTime time1 = LocalTime.of(Integer.parseInt(datetime.substring(11, 13)), Integer.parseInt(datetime.substring(14, 16)));
        dateTimePickerAppointment.datePicker.setDate(date1);
        dateTimePickerAppointment.timePicker.setTime(time1);
        jTextFieldAppPatientID.setText(model.getValueAt(i, 2). toString());
        jTextFieldAppDentistID.setText(model.getValueAt(i, 3). toString());
        jTextFieldAppointmentNote.setText(model.getValueAt(i, 4). toString());
    }//GEN-LAST:event_jTableAppointmentMouseClicked

    private void jButtonPateintInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPateintInsertActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldPatientID.getText().isEmpty()) {
            int pID = Integer.parseInt(jTextFieldPatientID.getText().trim());
            String FirstName = jTextFieldPatientFirstName.getText().trim();
            String LastName = jTextFieldPatientLastName.getText().trim();
            String Gender = jTextFieldPatientGender.getText().trim();
            String PatientPhoneN= jTextFieldPatientPhoneN.getText().trim();
            primaryKeyViolationPatient(pID);
            if(PatientPhoneN.matches("^[0-9]{10}$")){
                jTextFieldPatientPhoneN.setEditable(true);
                addPatient(pID, FirstName, LastName, Gender, PatientPhoneN);
                refreshPatientTable();
                clearPatientTextFields();
            }
            else if(jTextFieldPatientPhoneN.getText().isEmpty()){
             
                    alert("Phone Number Cannot be Empty","Invalid Phone Number");}
            else
            {
                alert("Phone number should be 10 digits only","Invalid Phone Number");
            }
            
        }
        
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
        
    }//GEN-LAST:event_jButtonPateintInsertActionPerformed

    private void jButtonPatientUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPatientUpdateActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldPatientID.getText().isEmpty()) {
        int pID = Integer.parseInt(jTextFieldPatientID.getText().trim());
        String FirstName = jTextFieldPatientFirstName.getText().trim();
        String LastName = jTextFieldPatientLastName.getText().trim();
        String Gender = jTextFieldPatientGender.getText().trim();
        String PatientPhoneN= jTextFieldPatientPhoneN.getText().trim();
        Patient patient = getPatient(pID);
        if(patient.getpID() != -1 && PatientPhoneN.matches("^[0-9]{10}$")){
            jTextFieldPatientPhoneN.setEditable(true);
            updatePatient(pID, FirstName,LastName,Gender,PatientPhoneN);
            refreshPatientTable();
            clearPatientTextFields();
        }
        else
            {
                alert("Checkin location does not exist", "Update error");
            }
        }
        else
            {
                alert("Patient ID cannot be empty", "Update error");
            }
    }//GEN-LAST:event_jButtonPatientUpdateActionPerformed

    private void jButtonPatientDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPatientDeleteActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldPatientID.getText().isEmpty()) {
            int pID = Integer.parseInt(jTextFieldPatientID.getText().trim());
            String FirstName = jTextFieldPatientFirstName.getText().trim();
            String LastName = jTextFieldPatientLastName.getText().trim();
            String Gender = jTextFieldPatientGender.getText().trim();
            String PatientPhoneN= jTextFieldPatientPhoneN.getText().trim();
            Patient patient = getPatient(pID);
            if(patient.getpID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deletePatient(pID, FirstName, LastName, Gender, PatientPhoneN);
                    refreshPatientTable();
                    clearPatientTextFields();
                }
            }
            else
            {
                alert("Patient does not exist", "Delete error");
            }
        }
        else
        {
            alert("Patient ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonPatientDeleteActionPerformed

    private void jButtonDentistInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDentistInsertActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldDentistID.getText().isEmpty()) {
            int dID = Integer.parseInt(jTextFieldDentistID.getText().trim());
            String FirstName = jTextFieldDentistFirstName.getText().trim();
            String LastName = jTextFieldDentistLastName.getText().trim();
            String DentistPhoneN = jTextFieldDentistPhoneN.getText().trim();
            String Title= jTextFieldDentistTitle.getText().trim();
            primaryKeyViolationDentist(dID);
            if(DentistPhoneN.matches("^[0-9]{10}$")){
                jTextFieldDentistPhoneN.setEditable(true);
                addDentist(dID, FirstName, LastName, DentistPhoneN, Title);
                refreshDentistTable();
                clearDentistTextFields();
            }
            else if(jTextFieldPatientPhoneN.getText().isEmpty()){
             
                    alert("Phone Number Cannot be Empty","Invalid Phone Number");}
            else
            {
                alert("Phone number should be 10 digits only","Invalid Phone Number");
            }                
        }
        
        else
        {
            alert("Dentist ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonDentistInsertActionPerformed

    private void jButtonDentistUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDentistUpdateActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldDentistID.getText().isEmpty()) {
        int dID = Integer.parseInt(jTextFieldDentistID.getText().trim());
        String FirstName = jTextFieldDentistFirstName.getText().trim();
        String LastName = jTextFieldDentistLastName.getText().trim();
        String DentistPhoneN = jTextFieldDentistPhoneN.getText().trim();
        String Title= jTextFieldDentistTitle.getText().trim();
        Dentist dentist = getDentist(dID);
        if(dentist.getdID() != -1 && DentistPhoneN.matches("^[0-9]{10}$")){
            jTextFieldPatientPhoneN.setEditable(true);
            updateDentist(dID, FirstName,LastName,DentistPhoneN,Title);
            refreshDentistTable();
            clearDentistTextFields();
        }
        else
            {
                alert("Dentist does not exist", "Update error");
            }
        }
        else
            {
                alert("Dentist ID cannot be empty", "Update error");
            }
    }//GEN-LAST:event_jButtonDentistUpdateActionPerformed

    private void jButtonDentistDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDentistDeleteActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldDentistID.getText().isEmpty()) {
        int dID = Integer.parseInt(jTextFieldDentistID.getText().trim());
        String FirstName = jTextFieldDentistFirstName.getText().trim();
        String LastName = jTextFieldDentistLastName.getText().trim();
        String DentistPhoneN = jTextFieldDentistPhoneN.getText().trim();
        String Title= jTextFieldDentistTitle.getText().trim();
        Dentist dentist = getDentist(dID);
            if(dentist.getdID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteDentist(dID, FirstName,LastName,DentistPhoneN,Title);
                    refreshDentistTable();
                    clearDentistTextFields();
                }
            }
            else
            {
                alert("Dentist does not exist", "Delete error");
            }
        }
        else
        {
            alert("Dentist ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDentistDeleteActionPerformed

    private void jButtonAppointmentInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAppointmentInsertActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldAppointmentID.getText().isEmpty()) {
            int apID = Integer.parseInt(jTextFieldAppointmentID.getText().trim());
            String getDate = dateTimePickerAppointment.datePicker.getDateStringOrEmptyString();
        String datePattern = "d{4}-d{2}-d{2}";

        if(!getDate.matches(datePattern))
        {
            alert("Please pick a valid date","Invalid Date");
            return;
        }

        String getTime = dateTimePickerAppointment.timePicker.getTimeStringOrEmptyString();
        String timePattern = "d{2}:d{2}";

        if(!getTime.matches(timePattern))
        {
            alert("Please pick a valid time","Invalid time");
            return;
        }

        String date = dateTimePickerAppointment.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerAppointment.timePicker.getTimeStringOrEmptyString()+":00.0";
            int pID = Integer.parseInt(jTextFieldAppPatientID.getText().trim());
            int dID = Integer.parseInt(jTextFieldAppDentistID.getText().trim());
            String AppNote = jTextFieldAppointmentNote.getText().trim();
            primaryKeyViolationAppointment(apID);
            foreignKeyViolationAppointmentP(pID);
            foreignKeyViolationAppointmentD(dID);
            addAppointment(apID, date, pID, dID, AppNote);
            refreshAppointmentTable();
            clearAppointmentTextFields();
        }
        else
        {
            alert("Appointment ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonAppointmentInsertActionPerformed

    private void jButtonAppointmentUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAppointmentUpdateActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldAppointmentID.getText().isEmpty()) {
            int apID = Integer.parseInt(jTextFieldAppointmentID.getText().trim());
            String date = dateTimePickerAppointment.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerAppointment.timePicker.getTimeStringOrEmptyString()+":00.0";
            int pID = Integer.parseInt(jTextFieldAppPatientID.getText().trim());
            int dID = Integer.parseInt(jTextFieldAppDentistID.getText().trim());
            String AppNote = jTextFieldAppointmentNote.getText().trim();
            Appointment appointment = getAppointment(apID);
            if(appointment.getapID() != -1) {
                updateAppointment(apID, date, pID, dID, AppNote);
                refreshAppointmentTable();
                clearAppointmentTextFields();
            }
            else
            {
                alert("Appointment does not exist", "Update error");
            }
        }
        else
        {
            alert("Appointment ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonAppointmentUpdateActionPerformed

    private void jButtonAppointmentDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAppointmentDeleteActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldAppointmentID.getText().isEmpty()) {
            int apID = Integer.parseInt(jTextFieldAppointmentID.getText().trim());
            String date = dateTimePickerAppointment.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerAppointment.timePicker.getTimeStringOrEmptyString()+":00.0";
            int pID = Integer.parseInt(jTextFieldAppPatientID.getText().trim());
            int dID = Integer.parseInt(jTextFieldAppDentistID.getText().trim());
            String AppNote = jTextFieldAppointmentNote.getText().trim();
            Appointment appointment = getAppointment(apID);
            if(appointment.getapID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteAppointment(apID, date, pID, dID, AppNote);
                    refreshAppointmentTable();
                    clearAppointmentTextFields();
                }
            }
            else
            {
                alert("Appointment does not exist", "Delete error");
            }
        }
        else
        {
            alert("Appointment ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonAppointmentDeleteActionPerformed

    private void jLabelDentistTutorialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDentistTutorialMouseClicked
        // TODO add your handling code here:
        try{
            Desktop.getDesktop().browse(new URL("https://psu.zoom.us/rec/share/hQVSI88UNyXyB6PhZVMBjMVT0KE4sQ0FVpAgRE-pBBQ8dQDqsINec6pQy-j1gPPT.CUoBWE_y-_ZeYRp_?startTime=1650982421000").toURI());
            
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_jLabelDentistTutorialMouseClicked

    private void jLabelPatientTutorialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelPatientTutorialMouseClicked
        // TODO add your handling code here:
        try{
            Desktop.getDesktop().browse(new URL("https://psu.zoom.us/rec/share/Us8NDKCzylDGoPob4O0kEvkYpB9YwhiAUFX3-1h6lizj8G1ieUEJJUPHUMTakbjK.VeDk_VcWRDIejuSx?startTime=1650982196000").toURI());
            
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_jLabelPatientTutorialMouseClicked

    private void jLabelAppointmentTutorialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAppointmentTutorialMouseClicked
        // TODO add your handling code here:
        try{
            Desktop.getDesktop().browse(new URL("https://psu.zoom.us/rec/share/hQVSI88UNyXyB6PhZVMBjMVT0KE4sQ0FVpAgRE-pBBQ8dQDqsINec6pQy-j1gPPT.CUoBWE_y-_ZeYRp_?startTime=1650982586000").toURI());
            
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_jLabelAppointmentTutorialMouseClicked
     
    private void clearPatientTextFields(){
        jTextFieldPatientID.setText("");
        jTextFieldPatientFirstName.setText("");
        jTextFieldPatientLastName.setText("");
        jTextFieldPatientGender.setText("");
        jTextFieldPatientPhoneN.setText("");
    }
    private void clearDentistTextFields(){
        jTextFieldDentistID.setText("");
        jTextFieldDentistFirstName.setText("");
        jTextFieldDentistLastName.setText("");
        jTextFieldDentistPhoneN.setText("");
        jTextFieldDentistTitle.setText("");
    }
    private void clearAppointmentTextFields(){
        jTextFieldAppointmentID.setText("");
        jTextFieldAppPatientID.setText("");
        jTextFieldAppDentistID.setText("");
        jTextFieldAppointmentNote.setText("");
    }
    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }
    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }
    public void primaryKeyViolationPatient(int pID) {
        if(getPatient(pID).getpID() != -1) {
            alert("Another patient already exists with same Patient ID, please try another Patient ID", "Primary Key Violation");
        }
    }
    public void primaryKeyViolationDentist(int dID) {
        if(getDentist(dID).getdID() != -1) {
            alert("Another dentist already exists with same Dentist ID, please try another Dentist ID", "Primary Key Violation");
        }
    }
    public void primaryKeyViolationAppointment(int apID) {
        if(getAppointment(apID).getapID() != -1) {
            alert("Another appointment already exists with same Appointment ID, please try another Appointment ID", "Primary Key Violation");
        }
    }
    public void foreignKeyViolationAppointmentP(int ID) {
        if(getPatient(ID).getpID() == -1) {
            alert("Patient ID does not exist", "Foreign Key Violation");
        }
    }
    public void foreignKeyViolationAppointmentD(int dID) {
        if(getDentist(dID).getdID() == -1) {
            alert("Dentist ID does not exist", "Foreign Key Violation");
        }
    }
    
    /**
     * Patient CRUD FUNCTIONS
    */
    private static void addPatient(int ID, String Fname, String Lname, String Gender, String PhoneN) {
        Patient patient;
        patient = new Patient(ID, Fname, Lname, Gender, PhoneN);
        patientDAO.insert(patient);
    }
    private static void updatePatient(int ID, String Fname, String Lname, String Gender, String PhoneN) {
        Patient patient;
        patient = new Patient(ID, Fname, Lname, Gender, PhoneN);
        patientDAO.update(patient);
    }
    private static void deletePatient(int ID, String Fname, String Lname, String Gender, String PhoneN) {
        Patient patient;
        patient = new Patient(ID, Fname, Lname, Gender, PhoneN);
        patientDAO.delete(patient);
    }
    static Patient getPatient(int pID) {
        Optional<Patient> patient = patientDAO.get(pID);
        return patient.orElseGet(() -> new Patient(-1, "Non-exist", "Non-exist", "Non-exist", "Non-exist"));
    }
//    static Patient getPatient(int ID) {
//        Optional<Patient> patient = patientDAO.get(ID);
//        return patient.orElseGet(() -> new Patient(-1, "Non-exist", "Non-exist", "Non-exist", "Non-exist",));
//    }
     /**
     * Dentist CRUD FUNCTIONS
    */
    private static void addDentist(int dID, String dFname, String dLname, String dPhoneN, String dTitle) {
        Dentist dentist;
        dentist = new Dentist(dID, dFname, dLname, dPhoneN, dTitle);
        dentistDAO.insert(dentist);
    }
    private static void updateDentist(int dID, String dFname, String dLname, String dPhoneN, String dTitle) {
        Dentist dentist;
        dentist = new Dentist(dID, dFname, dLname, dPhoneN, dTitle);
        dentistDAO.update(dentist);
    }
    private static void deleteDentist(int dID, String dFname, String dLname, String dPhoneN, String dTitle) {
        Dentist dentist;
        dentist = new Dentist(dID, dFname, dLname, dPhoneN, dTitle);
        dentistDAO.delete(dentist);
    }
    static Dentist getDentist(int ID) {
        Optional<Dentist> dentist = dentistDAO.get(ID);
        return dentist.orElseGet(() -> new Dentist(-1, "Non-exist", "Non-exist", "Non-exist", "Non-exist"));
    }
    /**
     * Appointment CRUD FUNCTIONS
    */
    private static void addAppointment(int apID, String apDateTime, int pID, int dID, String apNote) {
        Appointment appointment;
        appointment = new Appointment(apID, apDateTime, pID, dID, apNote);
        appointmentDAO.insert(appointment);
    }
    private static void updateAppointment(int apID, String apDateTime, int pID, int dID, String apNote) {
        Appointment appointment;
        appointment = new Appointment(apID, apDateTime, pID, dID, apNote);
        appointmentDAO.update(appointment);
    }
    private static void deleteAppointment(int apID, String apDateTime, int pID, int dID, String apNote) {
        Appointment appointment;
        appointment = new Appointment(apID, apDateTime, pID, dID, apNote);
        appointmentDAO.delete(appointment);
    }
    static Appointment getAppointment(int apID) {
        Optional<Appointment> appointment = appointmentDAO.get(apID);
        return appointment.orElseGet(() -> new Appointment(-1, "Non-exist", -1, -1, "Non-exist"));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        patientDAO = new PatientDAO();
        dentistDAO = new DentistDAO();
        appointmentDAO = new AppointmentDAO();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerAppointment;
    private javax.swing.JButton jButtonAppointmentDelete;
    private javax.swing.JButton jButtonAppointmentInsert;
    private javax.swing.JButton jButtonAppointmentUpdate;
    private javax.swing.JButton jButtonDentistDelete;
    private javax.swing.JButton jButtonDentistInsert;
    private javax.swing.JButton jButtonDentistUpdate;
    private javax.swing.JButton jButtonPateintInsert;
    private javax.swing.JButton jButtonPatientDelete;
    private javax.swing.JButton jButtonPatientUpdate;
    private javax.swing.JLabel jLabelAppDateTime;
    private javax.swing.JLabel jLabelAppDentistID;
    private javax.swing.JLabel jLabelAppPatientID;
    private javax.swing.JLabel jLabelAppointmentID;
    private javax.swing.JLabel jLabelAppointmentNote;
    private javax.swing.JLabel jLabelAppointmentTutorial;
    private javax.swing.JLabel jLabelDentistFirstName;
    private javax.swing.JLabel jLabelDentistID;
    private javax.swing.JLabel jLabelDentistLastName;
    private javax.swing.JLabel jLabelDentistPhoneN;
    private javax.swing.JLabel jLabelDentistTitle;
    private javax.swing.JLabel jLabelDentistTutorial;
    private javax.swing.JLabel jLabelPND;
    private javax.swing.JLabel jLabelPNP;
    private javax.swing.JLabel jLabelPateintPhoneN;
    private javax.swing.JLabel jLabelPatientFirstName;
    private javax.swing.JLabel jLabelPatientGender;
    private javax.swing.JLabel jLabelPatientID;
    private javax.swing.JLabel jLabelPatientLastName;
    private javax.swing.JLabel jLabelPatientTutorial;
    private javax.swing.JPanel jPanelAppointment;
    private javax.swing.JPanel jPanelDentist;
    private javax.swing.JPanel jPanelPatient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPaneDentalClinic;
    private javax.swing.JTable jTableAppointment;
    private javax.swing.JTable jTableDentist;
    private javax.swing.JTable jTablePatient;
    private javax.swing.JTextField jTextFieldAppDentistID;
    private javax.swing.JTextField jTextFieldAppPatientID;
    private javax.swing.JTextField jTextFieldAppointmentID;
    private javax.swing.JTextField jTextFieldAppointmentNote;
    private javax.swing.JTextField jTextFieldDentistFirstName;
    private javax.swing.JTextField jTextFieldDentistID;
    private javax.swing.JTextField jTextFieldDentistLastName;
    private javax.swing.JTextField jTextFieldDentistPhoneN;
    private javax.swing.JTextField jTextFieldDentistTitle;
    private javax.swing.JTextField jTextFieldPatientFirstName;
    private javax.swing.JTextField jTextFieldPatientGender;
    private javax.swing.JTextField jTextFieldPatientID;
    private javax.swing.JTextField jTextFieldPatientLastName;
    private javax.swing.JTextField jTextFieldPatientPhoneN;
    // End of variables declaration//GEN-END:variables
}
